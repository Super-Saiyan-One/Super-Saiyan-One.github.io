<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PAT-1003</title>
    <url>/posts/PAT-1003_url.html</url>
    <content><![CDATA[<h1 id="题意：给一个无向图-上面每个节点都有相应的val值-给定一个起点和终点。问起点到终点路径中最短距离的路径有几条，并且每条路径上最大的valu和是多少"><a href="#题意：给一个无向图-上面每个节点都有相应的val值-给定一个起点和终点。问起点到终点路径中最短距离的路径有几条，并且每条路径上最大的valu和是多少" class="headerlink" title="题意：给一个无向图,上面每个节点都有相应的val值,给定一个起点和终点。问起点到终点路径中最短距离的路径有几条，并且每条路径上最大的valu和是多少"></a>题意：给一个无向图,上面每个节点都有相应的val值,给定一个起点和终点。问起点到终点路径中最短距离的路径有几条，并且每条路径上最大的valu和是多少</h1><p>解法：<strong>跑一遍最短路，建立dist数组，再正向或者反向dfs一下求出路径条数和最大value值</strong></p>
<pre><code class="c++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span>

<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;

<span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;

<span class="keyword">int</span> n, m,s,ed,ans,price,value;
<span class="keyword">int</span> h[N], w[N], e[N], ne[N], idx;
<span class="keyword">int</span> dist[N],val[N];
<span class="keyword">bool</span> st[N];

<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>
<span class="function"></span>{
    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;
}

<span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ed)</span></span>
<span class="function"></span>{
    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);
    dist[x] = <span class="number">0</span>;
    priority_queue&lt;PII, <span class="built_in">vector</span>&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;
    heap.push({<span class="number">0</span>, x});

    <span class="keyword">while</span> (heap.<span class="built_in">size</span>())
    {
        <span class="keyword">auto</span> t = heap.top();
        heap.pop();

        <span class="keyword">int</span> ver = t.second, distance = t.first;

        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;
        st[ver] = <span class="literal">true</span>;

        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])
        {
            <span class="keyword">int</span> j = e[i];
            <span class="keyword">if</span> (dist[j] &gt; dist[ver] + w[i])
            {
                dist[j] = dist[ver] + w[i];
                heap.push({dist[j], j});
            }
        }
    }

    <span class="keyword">if</span> (dist[ed] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;
    <span class="keyword">return</span> dist[ed];
}
<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>
<span class="function"></span>{
    <span class="keyword">if</span>(x==ed)
    {
        ans++;
        value=<span class="built_in">max</span>(value,v);
        <span class="keyword">return</span>;
    }
    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i!=<span class="number">-1</span>;i=ne[i])
    {
        <span class="keyword">int</span> j=e[i];
        <span class="keyword">if</span>(dist[j]==dist[x]+w[i])
        dfs(j,v+val[j]);
    }
    <span class="keyword">return</span>;
}
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>
<span class="function"></span>{
    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m,&amp;s,&amp;ed);

    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val[i]);


    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);
    <span class="keyword">while</span> (m -- )
    {
        <span class="keyword">int</span> a, b, c;
        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);
        add(a, b, c);
        add(b, a, c);
    }

    dijkstra(s,ed);

    dfs(s,val[s]);

    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans,value);

    <span class="keyword">return</span> <span class="number">0</span>;
}



&lt;!-- more --&gt;</code></pre>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>堆优化Dijkstra</tag>
        <tag>邻接表</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/posts/8.13_url.html</url>
    <content><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><strong>快速排序</strong>即sort方法的手动实现</p>
<ol>
<li>确定当前区间的左端点l，右端点r，并取x=q[(l+r)/2]</li>
<li>运用双指针调整区间，使得区间左半边的值都&lt;=x，右半边区间的值都&gt;=x</li>
<li>不断递归</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> x=q[(l+r)/<span class="number">2</span>],i=l<span class="number">-1</span>,j=r+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">		<span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">		<span class="keyword">if</span>(i&lt;j) swap(q[i],q[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	quick_sort(q,l,j);</span><br><span class="line">	quick_sort(q,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q[i]);</span><br><span class="line">	</span><br><span class="line">	quick_sort(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,q[i]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>


]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 786.第k个数（快速选择）</title>
    <url>/posts/AcWing.786_url.html</url>
    <content><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><strong>快速排序</strong>即sort方法的手动实现</p>
<ol>
<li>确定当前区间的左端点l，右端点r，并取x=q[(l+r)/2]</li>
<li>运用双指针调整区间，使得区间左半边的值都&lt;=x，右半边区间的值都&gt;=x</li>
<li>不断递归<br>本题目与快速排序算法基本相同，由于要找出第k小的数，估值需要判断k在左区间还是右区间，只需要递归k所在的区间即可。复杂度：O(n)</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> q[l];</span><br><span class="line">	<span class="keyword">int</span> x=q[(l+r)/<span class="number">2</span>],i=l<span class="number">-1</span>,j=r+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">		<span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">		<span class="keyword">if</span>(i&lt;j) swap(q[i],q[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> sl=j-l+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(k&lt;=sl) <span class="keyword">return</span> quick_sort(l,j,k);</span><br><span class="line">	<span class="keyword">return</span> quick_sort(j+<span class="number">1</span>,r,k-sl);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span>&gt;&gt;q[i];</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,quick_sort(<span class="number">0</span>,n<span class="number">-1</span>,k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT 1119-前序遍历和后续遍历</title>
    <url>/posts/PAT%201119-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E5%92%8C_url.html</url>
    <content><![CDATA[<p><strong>题目要求：给出二叉树的前序遍历和后序遍历，输出其中序遍历。如果该二叉树不唯一，输出其中任意一个二叉树的中序遍历即可</strong></p>
<h1 id="二叉树的前序和后序遍历"><a href="#二叉树的前序和后序遍历" class="headerlink" title="二叉树的前序和后序遍历"></a>二叉树的前序和后序遍历</h1><p>二叉树的前序遍历可概述成：根左右<br>二叉树的后序遍历可概述成：左右根<br>我们另pre数组为二叉树前序遍历，post数组为二叉树的后序遍历。易知pre的第一个节点和post的最后一个节点一定为根节点。pre的第二个节点pre[2]要么是左子树根节点，要么是右子树根节点（左子树不存在）。<br>post的倒数第二个节点post[-2]要么是右子树的根节点，要么是左子树的根节点（当右子树不存在时）</p>
<blockquote>
<ol>
<li>如果preorder[2]!=postorder[-2]，那就说明preorder[2]和postorder[-2]所代表地根节点不是同一棵树，因此存在左子树和右子树，从而preorder[2]是左子树根节点，postorder[-2]是右子树根节点。</li>
<li>如果preorder[2]==postorder[-2]，那么就说明只存在一边的子树，其实是只有左子树也可以，只有右子树也可以。所以，存在不同的树的根源就在于这里。<br>这种情况下，我们就可以递归地去判断，只要有一次preorder[2]==postorder[-2]，就说明有多个解，这个时候我们只需要构造左子树（右子树）就可以了。</li>
</ol>
</blockquote>
<p>规律：<strong>所以其实我们可以看出一个规律：只有满二叉树才能通过前序遍历和后序遍历唯一确定</strong><br>     <strong>对于非满二叉树来说，前序和后序在本质上都是将父节点与子结点进行分离，但并没有指明左子树和右子树的能力，因此得到这两个序列只能明确父子关系，而不能确定一个二叉树。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N	= <span class="number">40</span>;</span><br><span class="line"><span class="keyword">int</span> l[N],r[N]; <span class="comment">//l[i],r[i]代表i号节点的左右儿子</span></span><br><span class="line"><span class="keyword">int</span> pre[N],post[N];</span><br><span class="line"><span class="keyword">bool</span> is_only=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> in[N],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l1,<span class="keyword">int</span> r1,<span class="keyword">int</span> l2,<span class="keyword">int</span> r2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> root=pre[l1];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(l1==r1) <span class="keyword">return</span> root;</span><br><span class="line">	<span class="comment">//根据pre[l1+1]和pre[r2-1]来判断答案是否唯一</span></span><br><span class="line">	<span class="keyword">if</span>(pre[l1+<span class="number">1</span>]==post[r2<span class="number">-1</span>])<span class="comment">//说明答案不唯一，我们直接认为右儿子不存在即可 </span></span><br><span class="line">	l[root] = build(l1+<span class="number">1</span>,r1,l2,r2<span class="number">-1</span>), is_only=<span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//不相同，那么说明 pre[l1+1]为左儿子的根节点，post[r2-1]为右儿子根节点 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> lpre,rpost;<span class="comment">//lpre代表前序序列中左子树的右边界，rpost代表后序序列中右子树的 左边界 </span></span><br><span class="line">		<span class="keyword">for</span>(lpre=l1+<span class="number">1</span>;lpre&lt;=r1;lpre++)  <span class="keyword">if</span>(pre[lpre]==post[r2<span class="number">-1</span>]) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span>(rpost=r2<span class="number">-1</span>;rpost&gt;=l2;rpost--) <span class="keyword">if</span>(post[rpost]==pre[l1+<span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line">		lpre--,rpost++;</span><br><span class="line">		l[root] = build(l1+<span class="number">1</span>,lpre,l2,rpost<span class="number">-1</span>);</span><br><span class="line">		r[root] = build(lpre+<span class="number">1</span>,r1,rpost,r2<span class="number">-1</span>); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l[root]!=<span class="number">-1</span>) inorder(l[root]);</span><br><span class="line">	in[cnt++] =root;</span><br><span class="line">	<span class="keyword">if</span>(r[root]!=<span class="number">-1</span>) inorder(r[root]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(l,<span class="number">-1</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line">	<span class="built_in">memset</span>(r,<span class="number">-1</span>,<span class="keyword">sizeof</span>(r));</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;pre[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;post[i];</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//根据前序遍历和后续遍历创建二叉树</span></span><br><span class="line">	<span class="keyword">int</span> root=build(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>); </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(is_only) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">	inorder(root);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;in[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;in[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>


]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 51</title>
    <url>/posts/leetcode-51_url.html</url>
    <content><![CDATA[<h1 id="题意：简单搜索，学习注意格式"><a href="#题意：简单搜索，学习注意格式" class="headerlink" title="题意：简单搜索，学习注意格式"></a>题意：简单搜索，学习注意格式</h1><p><a href="https://leetcode-cn.com/problems/n-queens/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/n-queens/</a></p>
<pre><code class="c++"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span>
<span class="keyword">public</span>:
    <span class="keyword">int</span> n;
    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; col,dg,udg;
    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; ans;
    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; path;

    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="title">solveNQueens</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>{
        n=_n;
        col = <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n);
        dg = udg = <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n*<span class="number">2</span>);
        path = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(n,<span class="built_in">string</span>(n,<span class="string">'.'</span>));

        dfs(<span class="number">0</span>);
        <span class="keyword">return</span> ans;
    }
    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>{
        <span class="keyword">if</span>(u == n){
            ans.push_back(path);
            <span class="keyword">return</span>;
        }

        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; n; i ++){
            <span class="keyword">if</span>(!col[i]&amp;&amp;!dg[u-i+n]&amp;&amp;!udg[u+i]){
                col[i] = dg[u-i+n] = udg[u+i] = <span class="literal">true</span>;
                path[u][i] = <span class="string">'Q'</span>;
                dfs(u+<span class="number">1</span>);
                path[u][i] = <span class="string">'.'</span>;
                col[i] = dg[u-i+n] = udg[u+i] = <span class="literal">false</span>;
            }
        }
    }

};
&lt;!-- more --&gt;</code></pre>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Acwing-17二叉树的下一个节点</title>
    <url>/posts/Acwing-17_url.html</url>
    <content><![CDATA[<p>给定一棵二叉树的其中一个节点，请找出中序遍历序列的下一个节点。</p>
<p><strong>注意：</strong></p>
<ul>
<li>如果给定的节点是中序遍历序列的最后一个，则返回空节点;</li>
<li>二叉树一定不为空，且给定的节点一定不是空节点；</li>
</ul>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假定二叉树是：[2, 1, 3, null, null, null, null]， 给出的是值等于2的节点。</span><br><span class="line"></span><br><span class="line">则应返回值等于3的节点。</span><br><span class="line"></span><br><span class="line">解释：该二叉树的结构如下，2的后继节点是3。</span><br><span class="line">  2</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   3</span><br></pre></td></tr></table></figure>

<p>算法<br>(模拟) O(h)O(h)<br>这道题目就是让我们求二叉树中给定节点的后继。</p>
<p>分情况讨论即可，如下图所示：</p>
<ol>
<li>如果当前节点有右儿子，则右子树中最左侧的节点就是当前节点的后继。比如F的后继是H；</li>
<li>如果当前节点没有右儿子，则需要沿着father域一直向上找，找到第一个是其father左儿子的节点，该节点的father就是当前节点的后继。比如当前节点是D，则第一个满足是其father左儿子的节点是F，则C的father就是D的后继，即F是D的后继。</li>
</ol>
<p><img data-src="https://www.acwing.com/media/article/image/2019/01/05/1_c55b510c10-QQ%E5%9B%BE%E7%89%8720190105023700.png" alt="QQ图片20190105023700.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode *father;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL), father(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">inorderSuccessor</span><span class="params">(TreeNode* p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;right) &#123;</span><br><span class="line">            p = p-&gt;right;</span><br><span class="line">            <span class="keyword">while</span> (p-&gt;left) p = p-&gt;left;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p-&gt;father &amp;&amp; p == p-&gt;father-&gt;right) p = p-&gt;father;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
</search>
