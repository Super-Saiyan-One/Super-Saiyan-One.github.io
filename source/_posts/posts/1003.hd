---
title: PAT-1003
url: PAT-1003_url
tags:
  - 图论
  - 堆优化Dijkstra
  - 邻接表
categories:
  - PAT
date: 2020-08-012 20:03:00
---
# 题意：给一个无向图,上面每个节点都有相应的val值,给定一个起点和终点。问起点到终点路径中最短距离的路径有几条，并且每条路径上最大的valu和是多少
解法：**跑一遍最短路，建立dist数组，再正向或者反向dfs一下求出路径条数和最大value值**

```c++
#include <cstring>
#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

typedef pair<int, int> PII;

const int N = 1e6 + 10;

int n, m,s,ed,ans,price,value;
int h[N], w[N], e[N], ne[N], idx;
int dist[N],val[N];
bool st[N];

void add(int a, int b, int c)
{
    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;
}

int dijkstra(int x,int ed)
{
    memset(dist, 0x3f, sizeof dist);
    dist[x] = 0;
    priority_queue<PII, vector<PII>, greater<PII>> heap;
    heap.push({0, x});

    while (heap.size())
    {
        auto t = heap.top();
        heap.pop();

        int ver = t.second, distance = t.first;

        if (st[ver]) continue;
        st[ver] = true;

        for (int i = h[ver]; i != -1; i = ne[i])
        {
            int j = e[i];
            if (dist[j] > dist[ver] + w[i])
            {
                dist[j] = dist[ver] + w[i];
                heap.push({dist[j], j});
            }
        }
    }

    if (dist[ed] == 0x3f3f3f3f) return -1;
    return dist[ed];
}
void dfs(int x,int v)
{
	if(x==ed)
	{
		ans++;
		value=max(value,v);
		return;
	}
	for(int i=h[x];i!=-1;i=ne[i])
	{
		int j=e[i];
		if(dist[j]==dist[x]+w[i])
		dfs(j,v+val[j]);
	}
	return;
}
int main()
{
    scanf("%d%d%d%d", &n, &m,&s,&ed);
    
	for(int i=0;i<n;i++) scanf("%d",&val[i]);
	
	
    memset(h, -1, sizeof h);
    while (m -- )
    {
        int a, b, c;
        scanf("%d%d%d", &a, &b, &c);
        add(a, b, c);
        add(b, a, c);
    }
    
	dijkstra(s,ed);

    dfs(s,val[s]);
    
    printf("%d %d\n",ans,value);

    return 0;
}



<!-- more -->
